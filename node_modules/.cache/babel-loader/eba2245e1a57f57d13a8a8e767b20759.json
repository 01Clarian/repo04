{"ast":null,"code":"import { CHANGE_SEARCH_FIELD, REQUEST_PEOPLE_PENDING, REQUEST_PEOPLE_SUCCESS, REQUEST_PEOPLE_FAILED } from './constants';\nexport const setSearchField = text => ({\n  type: CHANGE_SEARCH_FIELD,\n  payload: text\n});\nexport const requestPeople = () => dispatch => {\n  dispatch({\n    type: REQUEST_PEOPLE_PENDING\n  });\n  Promise.all(urls.map(url => fetch(url).then(people => people.json()).then(people => people.results))).then(users => this.setState({\n    peopleList: [].concat(...users)\n  })).then(data => dispatch({\n    type: REQUEST_PEOPLE_SUCCESS,\n    payload: data\n  })).catch(error => dispatch({\n    type: REQUEST_PEOPLE_FAILED,\n    payload: error\n  }));\n};","map":{"version":3,"sources":["/Users/mauriceknecht/Desktop/preredux 4/src/actions.js"],"names":["CHANGE_SEARCH_FIELD","REQUEST_PEOPLE_PENDING","REQUEST_PEOPLE_SUCCESS","REQUEST_PEOPLE_FAILED","setSearchField","text","type","payload","requestPeople","dispatch","Promise","all","urls","map","url","fetch","then","people","json","results","users","setState","peopleList","concat","data","catch","error"],"mappings":"AAAA,SAAQA,mBAAR,EACIC,sBADJ,EAEIC,sBAFJ,EAGIC,qBAHJ,QAGgC,aAHhC;AAKA,OAAO,MAAMC,cAAc,GAAIC,IAAD,KAAW;AACzCC,EAAAA,IAAI,EAACN,mBADoC;AAEzCO,EAAAA,OAAO,EAACF;AAFiC,CAAX,CAAvB;AAKP,OAAO,MAAMG,aAAa,GAAG,MAAOC,QAAD,IAAc;AACjDA,EAAAA,QAAQ,CAAC;AAACH,IAAAA,IAAI,EAACL;AAAN,GAAD,CAAR;AACES,EAAAA,OAAO,CAACC,GAAR,CAAYC,IAAI,CAACC,GAAL,CAASC,GAAG,IACtBC,KAAK,CAACD,GAAD,CAAL,CAAWE,IAAX,CAAgBC,MAAM,IAAIA,MAAM,CAACC,IAAP,EAA1B,EACCF,IADD,CACMC,MAAM,IAAIA,MAAM,CAACE,OADvB,CADU,CAAZ,EAICH,IAJD,CAIMI,KAAK,IAAI,KAAKC,QAAL,CAAc;AAACC,IAAAA,UAAU,EAAC,GAAGC,MAAH,CAAU,GAAGH,KAAb;AAAZ,GAAd,CAJf,EAKDJ,IALC,CAKIQ,IAAI,IAAIf,QAAQ,CAAC;AAACH,IAAAA,IAAI,EAACJ,sBAAN;AAA8BK,IAAAA,OAAO,EAACiB;AAAtC,GAAD,CALpB,EAMDC,KANC,CAMKC,KAAK,IAAIjB,QAAQ,CAAC;AAACH,IAAAA,IAAI,EAACH,qBAAN;AAA6BI,IAAAA,OAAO,EAACmB;AAArC,GAAD,CANtB;AAOD,CATM","sourcesContent":["import {CHANGE_SEARCH_FIELD,\n    REQUEST_PEOPLE_PENDING,\n    REQUEST_PEOPLE_SUCCESS,\n    REQUEST_PEOPLE_FAILED} from './constants'\n\nexport const setSearchField = (text) => ({\ntype:CHANGE_SEARCH_FIELD,\npayload:text\n})\n\nexport const requestPeople = () => (dispatch) => {\ndispatch({type:REQUEST_PEOPLE_PENDING})\n  Promise.all(urls.map(url =>\n    fetch(url).then(people => people.json())\n    .then(people => people.results)\n))\n  .then(users => this.setState({peopleList:[].concat(...users)} ))\n.then(data => dispatch({type:REQUEST_PEOPLE_SUCCESS, payload:data}))\n.catch(error => dispatch({type:REQUEST_PEOPLE_FAILED, payload:error}))    \n}"]},"metadata":{},"sourceType":"module"}