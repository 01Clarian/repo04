{"ast":null,"code":"import { CHANGE_SEARCH_FIELD, TOGGLE_HIDDEN, REQUEST_PEOPLE_PENDING, REQUEST_PEOPLE_SUCCESS, REQUEST_PEOPLE_FAILED, REQUEST_FILMS_PENDING, REQUEST_FILMS_SUCCESS, REQUEST_FILMS_FAILED, REQUEST_SPECIES_PENDING, REQUEST_SPECIES_SUCCESS, REQUEST_SPECIES_FAILED, REQUEST_VEHICLES_PENDING, REQUEST_VEHICLES_SUCCESS, REQUEST_VEHICLES_FAILED, REQUEST_PLANETS_PENDING, REQUEST_PLANETS_SUCCESS, REQUEST_PLANETS_FAILED, REQUEST_STARSHIPS_PENDING, REQUEST_STARSHIPS_SUCCESS, REQUEST_STARSHIPS_FAILED } from './constants'; //not sure how to input toggle mode correctly through \n//actions and reducers - \n\nexport const setToggleHidden = value => ({\n  type: TOGGLE_HIDDEN,\n  payload: value\n});\nexport const setSearchField = text => ({\n  type: CHANGE_SEARCH_FIELD,\n  payload: text\n});\nconst urls = [\"https://swapi.co/api/people\", \"https://swapi.co/api/people?page=2\", \"https://swapi.co/api/people?page=3\", \"https://swapi.co/api/people?page=4\"];\nconst urls2 = [\"https://swapi.co/api/planets\", \"https://swapi.co/api/planets?page=2\", \"https://swapi.co/api/planets?page=3\", \"https://swapi.co/api/planets?page=4\"];\nconst urls3 = [\"https://swapi.co/api/starships\", \"https://swapi.co/api/starships?page=2\", \"https://swapi.co/api/starships?page=3\", \"https://swapi.co/api/starships?page=4\"];\nconst urls4 = [\"https://swapi.co/api/vehicles\", \"https://swapi.co/api/vehicles?page=2\", \"https://swapi.co/api/vehicles?page=3\", \"https://swapi.co/api/vehicles?page=4\"];\nconst urls5 = [\"https://swapi.co/api/species\", \"https://swapi.co/api/species?page=2\", \"https://swapi.co/api/species?page=3\", \"https://swapi.co/api/species?page=4\"];\nconst urls6 = [\"https://swapi.co/api/films\"];\nexport const requestPeople = () => dispatch => {\n  dispatch({\n    type: REQUEST_PEOPLE_PENDING\n  });\n  Promise.all(urls.map(url => fetch(url).then(resp => resp.json()).then(people => people.results))).then(data => dispatch({\n    type: REQUEST_PEOPLE_SUCCESS,\n    payload: [].concat(...data)\n  })).catch(error => dispatch({\n    type: REQUEST_PEOPLE_FAILED,\n    payload: error\n  }));\n};\nexport const requestPlanets = () => dispatch => {\n  dispatch({\n    type: REQUEST_PLANETS_PENDING\n  });\n  Promise.all(urls2.map(url => fetch(url).then(resp => resp.json()).then(planets => planets.results))).then(data => dispatch({\n    type: REQUEST_PLANETS_SUCCESS,\n    payload: [].concat(...data)\n  })).catch(error => dispatch({\n    type: REQUEST_PLANETS_FAILED,\n    payload: error\n  }));\n};\nexport const requestStarships = () => dispatch => {\n  dispatch({\n    type: REQUEST_STARSHIPS_PENDING\n  });\n  Promise.all(urls3.map(url => fetch(url).then(resp => resp.json()).then(starships => starships.results))).then(data => dispatch({\n    type: REQUEST_STARSHIPS_SUCCESS,\n    payload: [].concat(...data)\n  })).catch(error => dispatch({\n    type: REQUEST_STARSHIPS_FAILED,\n    payload: error\n  }));\n};\nexport const requestVehicles = () => dispatch => {\n  dispatch({\n    type: REQUEST_VEHICLES_PENDING\n  });\n  Promise.all(urls4.map(url => fetch(url).then(resp => resp.json()).then(starships => starships.results))).then(data => dispatch({\n    type: REQUEST_VEHICLES_SUCCESS,\n    payload: [].concat(...data)\n  })).catch(error => dispatch({\n    type: REQUEST_VEHICLES_FAILED,\n    payload: error\n  }));\n};\nexport const requestSpecies = () => dispatch => {\n  dispatch({\n    type: REQUEST_SPECIES_PENDING\n  });\n  Promise.all(urls5.map(url => fetch(url).then(resp => resp.json()).then(starships => starships.results))).then(data => dispatch({\n    type: REQUEST_SPECIES_SUCCESS,\n    payload: [].concat(...data)\n  })).catch(error => dispatch({\n    type: REQUEST_SPECIES_FAILED,\n    payload: error\n  }));\n};\nexport const requestFilms = () => dispatch => {\n  dispatch({\n    type: REQUEST_FILMS_PENDING\n  });\n  fetch('https://swapi.co/api/films').then(resp => resp.json()).then(starships => starships.results).then(data => dispatch({\n    type: REQUEST_SPECIES_SUCCESS,\n    payload: [].concat(...data)\n  })).catch(error => dispatch({\n    type: REQUEST_SPECIES_FAILED,\n    payload: error\n  }));\n};","map":{"version":3,"sources":["/Users/mauriceknecht/Desktop/ZERO TO MASTERY/REACT PROJECTS/STARWARSFINAL/src/actions.js"],"names":["CHANGE_SEARCH_FIELD","TOGGLE_HIDDEN","REQUEST_PEOPLE_PENDING","REQUEST_PEOPLE_SUCCESS","REQUEST_PEOPLE_FAILED","REQUEST_FILMS_PENDING","REQUEST_FILMS_SUCCESS","REQUEST_FILMS_FAILED","REQUEST_SPECIES_PENDING","REQUEST_SPECIES_SUCCESS","REQUEST_SPECIES_FAILED","REQUEST_VEHICLES_PENDING","REQUEST_VEHICLES_SUCCESS","REQUEST_VEHICLES_FAILED","REQUEST_PLANETS_PENDING","REQUEST_PLANETS_SUCCESS","REQUEST_PLANETS_FAILED","REQUEST_STARSHIPS_PENDING","REQUEST_STARSHIPS_SUCCESS","REQUEST_STARSHIPS_FAILED","setToggleHidden","value","type","payload","setSearchField","text","urls","urls2","urls3","urls4","urls5","urls6","requestPeople","dispatch","Promise","all","map","url","fetch","then","resp","json","people","results","data","concat","catch","error","requestPlanets","planets","requestStarships","starships","requestVehicles","requestSpecies","requestFilms"],"mappings":"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","sourcesContent":["import {CHANGE_SEARCH_FIELD,\n    TOGGLE_HIDDEN,\n    REQUEST_PEOPLE_PENDING,\n    REQUEST_PEOPLE_SUCCESS,\n    REQUEST_PEOPLE_FAILED,\n    REQUEST_FILMS_PENDING,\n    REQUEST_FILMS_SUCCESS,\n    REQUEST_FILMS_FAILED,\n    REQUEST_SPECIES_PENDING,\n    REQUEST_SPECIES_SUCCESS,\n    REQUEST_SPECIES_FAILED,\n    REQUEST_VEHICLES_PENDING,\n    REQUEST_VEHICLES_SUCCESS,\n    REQUEST_VEHICLES_FAILED,\n    REQUEST_PLANETS_PENDING,\n    REQUEST_PLANETS_SUCCESS,\n    REQUEST_PLANETS_FAILED,\n    REQUEST_STARSHIPS_PENDING,\n    REQUEST_STARSHIPS_SUCCESS,\n    REQUEST_STARSHIPS_FAILED} from './constants'\n\n    //not sure how to input toggle mode correctly through \n    //actions and reducers - \n\nexport const setToggleHidden = (value) => ({\n    type:TOGGLE_HIDDEN, \n    payload:value\n})\n\nexport const setSearchField = (text) => ({\ntype:CHANGE_SEARCH_FIELD,\npayload:text\n})\n\nconst urls = \n [\"https://swapi.co/api/people\",\n  \"https://swapi.co/api/people?page=2\",\n  \"https://swapi.co/api/people?page=3\",\n  \"https://swapi.co/api/people?page=4\" ]\n\n  const urls2 = \n  [\"https://swapi.co/api/planets\",\n  \"https://swapi.co/api/planets?page=2\",\n  \"https://swapi.co/api/planets?page=3\",\n  \"https://swapi.co/api/planets?page=4\" ]\n  \n  const urls3 = \n  [\"https://swapi.co/api/starships\",\n  \"https://swapi.co/api/starships?page=2\",\n  \"https://swapi.co/api/starships?page=3\",\n  \"https://swapi.co/api/starships?page=4\" ]  \n\n  const urls4 = \n  [\"https://swapi.co/api/vehicles\",\n  \"https://swapi.co/api/vehicles?page=2\",\n  \"https://swapi.co/api/vehicles?page=3\",\n  \"https://swapi.co/api/vehicles?page=4\" ]  \n  \n  const urls5 = \n  [\"https://swapi.co/api/species\",\n  \"https://swapi.co/api/species?page=2\",\n  \"https://swapi.co/api/species?page=3\",\n  \"https://swapi.co/api/species?page=4\" ]  \n\n  const urls6 = \n  [\"https://swapi.co/api/films\"]  \n\n\nexport const requestPeople = () => (dispatch) => {\ndispatch({type:REQUEST_PEOPLE_PENDING})\n  Promise.all(urls.map(url =>\n    fetch(url).then(resp => resp.json())\n    .then(people => people.results)\n))\n.then(data => dispatch({type:REQUEST_PEOPLE_SUCCESS, payload:[].concat(...data)}))\n.catch(error => dispatch({type:REQUEST_PEOPLE_FAILED, payload:error}))    \n}\n\nexport const requestPlanets = () => (dispatch) => {\n    dispatch({type:REQUEST_PLANETS_PENDING})\n      Promise.all(urls2.map(url =>\n        fetch(url).then(resp => resp.json())\n        .then(planets => planets.results)\n    ))\n    .then(data => dispatch({type:REQUEST_PLANETS_SUCCESS, payload:[].concat(...data)}))\n    .catch(error => dispatch({type:REQUEST_PLANETS_FAILED, payload:error}))    \n    }\n\n    export const requestStarships = () => (dispatch) => {\n        dispatch({type:REQUEST_STARSHIPS_PENDING})\n          Promise.all(urls3.map(url =>\n            fetch(url).then(resp => resp.json())\n            .then(starships => starships.results)\n        ))\n        .then(data => dispatch({type:REQUEST_STARSHIPS_SUCCESS, payload:[].concat(...data)}))\n        .catch(error => dispatch({type:REQUEST_STARSHIPS_FAILED, payload:error}))    \n        }\n\n        export const requestVehicles = () => (dispatch) => {\n          dispatch({type:REQUEST_VEHICLES_PENDING})\n            Promise.all(urls4.map(url =>\n              fetch(url).then(resp => resp.json())\n              .then(starships => starships.results)\n          ))\n          .then(data => dispatch({type:REQUEST_VEHICLES_SUCCESS, payload:[].concat(...data)}))\n          .catch(error => dispatch({type:REQUEST_VEHICLES_FAILED, payload:error}))    \n          }\n\n          export const requestSpecies = () => (dispatch) => {\n            dispatch({type:REQUEST_SPECIES_PENDING})\n              Promise.all(urls5.map(url =>\n                fetch(url).then(resp => resp.json())\n                .then(starships => starships.results)\n            ))\n            .then(data => dispatch({type:REQUEST_SPECIES_SUCCESS, payload:[].concat(...data)}))\n            .catch(error => dispatch({type:REQUEST_SPECIES_FAILED, payload:error}))    \n            }\n\n            export const requestFilms = () => (dispatch) => {\n              dispatch({type:REQUEST_FILMS_PENDING})\n                  fetch('https://swapi.co/api/films').then(resp => resp.json())\n                  .then(starships => starships.results)\n              \n              .then(data => dispatch({type:REQUEST_SPECIES_SUCCESS, payload:[].concat(...data)}))\n              .catch(error => dispatch({type:REQUEST_SPECIES_FAILED, payload:error}))    \n              }"]},"metadata":{},"sourceType":"module"}